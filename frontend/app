import streamlit as st
import requests
from io import BytesIO
import time

# Page configuration
st.set_page_config(
    page_title="RAG Chatbot",
    page_icon="🤖",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
    <style>
    .main {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    .stTextInput > div > div > input {
        background-color: white;
    }
    .chat-message {
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        display: flex;
        flex-direction: column;
    }
    .user-message {
        background-color: #e3f2fd;
        border-left: 5px solid #2196f3;
    }
    .assistant-message {
        background-color: #f3e5f5;
        border-left: 5px solid #9c27b0;
    }
    .message-content {
        margin-top: 0.5rem;
        color: #333;
    }
    .stButton > button {
        width: 100%;
        background-color: #667eea;
        color: white;
        border: none;
        border-radius: 0.5rem;
        padding: 0.5rem 1rem;
        font-weight: bold;
    }
    .stButton > button:hover {
        background-color: #5568d3;
    }
    .upload-section {
        background-color: white;
        padding: 2rem;
        border-radius: 1rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .chat-container {
        background-color: white;
        padding: 2rem;
        border-radius: 1rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        min-height: 500px;
    }
    </style>
""", unsafe_allow_html=True)

# Initialize session state
if 'messages' not in st.session_state:
    st.session_state.messages = []
if 'api_url' not in st.session_state:
    st.session_state.api_url = 'http://localhost:8000'

# Sidebar
with st.sidebar:
    st.title("⚙️ Settings")
    
    # API Configuration
    st.subheader("API Configuration")
    api_url = st.text_input(
        "Backend API URL",
        value=st.session_state.api_url,
        help="Enter your FastAPI backend URL"
    )
    st.session_state.api_url = api_url
    
    # Test connection
    if st.button("🔌 Test Connection"):
        try:
            response = requests.get(f"{api_url}/api/health", timeout=5)
            if response.status_code == 200:
                st.success("✅ Connection successful!")
            else:
                st.error("❌ Connection failed!")
        except Exception as e:
            st.error(f"❌ Error: {str(e)}")
    
    st.divider()
    
    # Statistics
    st.subheader("📊 Statistics")
    if st.button("Get Index Stats"):
        try:
            response = requests.get(f"{api_url}/api/index-stats", timeout=5)
            if response.status_code == 200:
                stats = response.json()
                st.json(stats)
            else:
                st.error("Failed to fetch statistics")
        except Exception as e:
            st.error(f"Error: {str(e)}")
    
    st.divider()
    
    # Clear chat
    if st.button("🗑️ Clear Chat History"):
        st.session_state.messages = []
        st.rerun()
    
    st.divider()
    
    # About
    st.subheader("ℹ️ About")
    st.markdown("""
    **RAG Chatbot** uses Retrieval Augmented Generation to answer questions based on your uploaded documents.
    
    **Features:**
    - PDF document processing
    - AI-powered responses
    - Context-aware answers
    """)

# Main content
st.title("🤖 RAG Chatbot")
st.markdown("### AI-powered document assistant")

# Create two columns
col1, col2 = st.columns([1, 2])

# Left column - Upload section
with col1:
    st.markdown('<div class="upload-section">', unsafe_allow_html=True)
    st.subheader("📄 Upload Document")
    
    uploaded_file = st.file_uploader(
        "Choose a PDF file",
        type=['pdf'],
        help="Upload a PDF document to ask questions about"
    )
    
    if uploaded_file is not None:
        st.info(f"📎 Selected: {uploaded_file.name}")
        
        if st.button("⬆️ Upload & Process"):
            with st.spinner("Processing PDF... This may take a moment."):
                try:
                    files = {'file': (uploaded_file.name, uploaded_file, 'application/pdf')}
                    response = requests.post(
                        f"{st.session_state.api_url}/api/upload-pdf",
                        files=files,
                        timeout=120
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        st.success(f"✅ Successfully processed {data.get('chunks_created', 0)} chunks!")
                        st.balloons()
                    else:
                        st.error(f"❌ Upload failed: {response.text}")
                except Exception as e:
                    st.error(f"❌ Error: {str(e)}")
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Tips section
    st.markdown("---")
    st.subheader("💡 Tips")
    st.markdown("""
    - Upload a PDF document first
    - Ask specific questions
    - Try different phrasings
    - Check connection status
    """)

# Right column - Chat section
with col2:
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)
    
    # Display chat messages
    chat_container = st.container()
    with chat_container:
        if len(st.session_state.messages) == 0:
            st.info("👋 Welcome! Upload a PDF and start asking questions.")
        else:
            for message in st.session_state.messages:
                if message["role"] == "user":
                    st.markdown(
                        f'<div class="chat-message user-message">'
                        f'<strong>👤 You</strong>'
                        f'<div class="message-content">{message["content"]}</div>'
                        f'</div>',
                        unsafe_allow_html=True
                    )
                else:
                    st.markdown(
                        f'<div class="chat-message assistant-message">'
                        f'<strong>🤖 Assistant</strong>'
                        f'<div class="message-content">{message["content"]}</div>'
                        f'</div>',
                        unsafe_allow_html=True
                    )
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Chat input
    st.markdown("---")
    
    # Create input form
    with st.form(key="chat_form", clear_on_submit=True):
        user_input = st.text_input(
            "Ask a question about your document:",
            placeholder="What is this document about?",
            label_visibility="collapsed"
        )
        submit_button = st.form_submit_button("Send 📤")
    
    if submit_button and user_input:
        # Add user message
        st.session_state.messages.append({"role": "user", "content": user_input})
        
        # Get assistant response
        with st.spinner("🤔 Thinking..."):
            try:
                response = requests.post(
                    f"{st.session_state.api_url}/api/chat",
                    json={"message": user_input},
                    timeout=30
                )
                
                if response.status_code == 200:
                    data = response.json()
                    assistant_message = data.get('response', 'No response received')
                    st.session_state.messages.append({
                        "role": "assistant",
                        "content": assistant_message
                    })
                else:
                    error_msg = f"Error: Unable to get response (Status: {response.status_code})"
                    st.session_state.messages.append({
                        "role": "assistant",
                        "content": error_msg
                    })
            except Exception as e:
                error_msg = f"Error: {str(e)}. Please check your backend connection."
                st.session_state.messages.append({
                    "role": "assistant",
                    "content": error_msg
                })
        
        # Rerun to update chat display
        st.rerun()

# Footer
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: white;'>"
    "Built with ❤️ using FastAPI, Streamlit, Google Gemini & Pinecone"
    "</div>",
    unsafe_allow_html=True
)